September 21st 2014:

    This week we did some research on setting up a static website using AWS. Amazon Web Services has a service called S3 that stands for Simple Storage Service. We should be able to leverage this service to host our static web application. We created an account with AWS and created our "Grand Challenges" bucket. A bucket is the storage container in S3. This is where our source code will live. We will need to make sure that our source code is publicly accessible and enable the bucket for static web hosting.

September 29th 2014:

    This week we created a proof of concept application. We wanted to display an AngularJS "Hello World" app and an Ember.js "Hello World" app in two seperate frames. We went out to https://angularjs.org/ and http://emberjs.com/ to do some research. Each framework had a sample app example. It was really easy to get the AnuglarJS app up and running. The EmberJS app was not as easy and required a much larger package to get working. We deployed our code into our Grand Challenge S3 bucket on AWS and made them publicly viewable. To view our proof of concept application you can click go to the link below.

Link to application in AWS: https://s3.amazonaws.com/grandchallenges/index.html

October 7th 2014:

    Today we began writing our first test between Angular and Ember. Both Frameworks highlight their ability to easily data bind objects and repeat over that data to build dynamic html. This is especially useful if you wish to build a table or list but want that html code to accomodate a list of any size. For this experiment, we took a list on 10,000 numbers and wanted to place that data in an html table.
    
    In Angular, the code was fairly simple, but required a bit of trial and error/research to get it up and running. In the end, we needed to create an Angular controller that loaded our data (the list of 10,000 numbers) into the $scope. Once we have a reference to the data in the $scope, we are able to refer to it in the html. The html to build our huge list is shown below. Really cool!
    
ng-repeat: <div ng-app="">
                <div ng-controller="listCtrl">
                    <table>
                        <tr>
                            <th>A Table With 10,000 Rows</th>
                        </tr>
                        <tr ng-repeat="number in data">
                            <td>{{number}}</td>
                        </tr>
                </table>
            </div>
            
    The double curly braces is how we data bind objects in Angular. It seems that Ember also uses a similar approach but they refer to their data binding curly braces as Handlebars. Our next step is the build the Ember equivalent and see how easy it is to load our data set.
    
We have updated our web application with the Angular code for the dynamic table. We have also created a GitHub repository for our code.

GitHub Repo: https://github.com/GeorgeMinnick/GrandChallenges.git

October 8th:

    Today we created this blog to keep a journal of our progress. We have updated the web application to link to this blog and uploaded the files into our S3 Bucket.
    
October 13th:

Tonight we finished the dynamic list comparison by implementing the Ember portion of the application. Ember uses Handlebars' {{#each}} helper to iterate through a list. The HTML for the 10,000 row table is shown below:

{{#each}}: <script type="text/x-handlebars" id="index">    
                <table>
                    <tr><th>A Table With 10,000 Rows using #each</th></tr>
                        {{#each item in model}}
                        <tr><td>{{item}}</td></tr>
                        {{/each}}
                </table>
            </script>
            
Angular and Ember use a similar approach with slightly different syntax. At this point, I like how Angular uses ng-repeat as an attribute on an HTML tag. Ember forces us to surround the tage with the {{#each}} handlebars, so we need a couple extra lines of code.

October 15th:

Tonight we implemented another page of our web application. We wanted to compare how easy it is for both frameworks to instantly data bind objects to the model. We implemented a simple input box where the value is bound directly to the model for each framework. As we change the value of the input box, the data is automatically updated and displayed on the screen.

For Angular, we were able to accomplish this using the ng-model service:

     <input type="text" ng-model="data" placeholder="Angular data here">
      <hr>
      <h1>{{data}}</h1>
      
Since the input box is bound to the "data" object in our scope, the h1 tag is immediately updated when the value of the input box changes.

For Ember, we were able to accomplish this using the {{input}} helper:

    <script type="text/x-handlebars" id="index">    
      <label>Data Bind:</label>
        {{input value=data placeholder="Ember data here"}}
      <hr>
      <h1>{{data}}</h1>
    </script>

This has the same behavior as the Angular implementation. Again, I perfer using the ng-model as an attribute rather than using the {{input}} helper. 

We have updated the blog and application with our changes.

October 19th:

Tonight we have implemented our Filtering experiment. We wanted to include an input box where the user could enter a number and filter the list of 10,000 numbers. We were able to do this in Angular fairly easily. We use the built-in filter service in conjuction with our ng-repeat directive. Our final implementation looks like this:

 filter: 

  <div ng-controller="listCtrl">
        Filter: <input type="number" ng-model="filter" placeholder="Enter Number To Filter By"></input>
        <table>
            <tr><th>A Table With 10,000 Rows using ng-repeat</th></tr>
            <tr ng-repeat="number in data | filter: filter">
              <td>{{number}}</td>
            </tr>
        </table>
    </div>

Unfortunately after lots of research and trial and error, we have discovered that Ember does not have a built-in template/helper for filtering in conjuction with the #each. We would need to write a custom JavaScript function to accomplish the same task.

We have updated the blog and web application.

October 22nd:

Today we are working on creating a few more test cases. We are hoping to create some test that will display visible differences on the client side (speed of load, formatting, usability) so that we have another form of comparison. At this point, almost all of the comparisons have been limited to implementation (angular has been easier to code). 

Also, we are beginning to write out a basic outline for the final paper. 


Next Steps:

Experiments (may reorder these for the site)

1. Dynamic Iteration
2. Filtering
3. Conditionals
4. Components
5. Custom Directives/Templates
6. Built in Directives/Templates
7. Routing
8. Controllers
9. Models
10.Data Binding

Paper (Topics we plan to cover)

 1. Introduction and Overview
 2. AWS
 3. Client Side Applications/Single Page Applications
 4. JavaScript
 5. AngularJS
 6. EmberJS
 7. Rubric for quantitative and qualitative comparison 
 8. Experimental findings
 9. Implementation examples/discussion
10. Experiences using each framework
11. Comparison results 
12. Conclusions and summary 

Google Doc Link: https://docs.google.com/document/d/1ef85d3Vh5ehdGpace4odvZgXIvOboVR2MlUHf72ESSk/edit?usp=sharing

October 23rd:

Tonight we finished the conditional test for Angular. We used two built-in directives called ng-show and ng-hide. We bound the vaule of a checkbox input using ng-model to two images of a lightbulb. When the checkbox is selected the lightbulb is on and when the checkbox is not selected the lightbulb is off.

Angular Conditional:

    <div ng-controller="listCtrl">
    <b>On/Off</b><input type="checkbox" ng-model="lightSwitch"></input>
      </br>
      </br>
    <hr/>
      <img src="lightOn.jpg" ng-show="lightSwitch"></img>
      <img src="lightOff.jpg" ng-hide="lightSwitch"></img>
    </div>
    
We also will meet with Kristin tonight to discuss the direction of our project.

October 24th:

Tonight we finished the conditional experiment by implementing the Ember solution. For conditionals, Ember has {{#if}} and {{else}}. These can be used to get the same desired effect as the ng-hide/ng-show that Angular provides. Ember allows us to create the input component using handlebars as shown below. Again, Ember is forcing us to write more lines of code than Angular. I would argue however, that the Ember implementation is more readable...


#if:
<script type="text/x-handlebars" id="index">    
    <div>
      <b>ON/OFF</b>
        {{input type="checkbox" checked=isOn}}
      <hr>
        {{#if isOn}}
            <img src="lightOn.jpg"></img>
        {{else}}
            <img src="lightOff.jpg"></img>
        {{/if}}
    </div>
</script>

Blog and application have been updated.

Oct. 27:

Going to begin writing an Overview, AWS intro, and general JS intro. Documents will be shared through Google Drive. 


      